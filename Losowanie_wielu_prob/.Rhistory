ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black")
abline(v=7/20, col="red")
ani.pause(1)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
library(animation);
library(ggplot2);
options(OutDec= ",");
library(knitr);
library(XML);
library(RCurl)
# Przygotowanie funkcji czytającej dane
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
# Przygotowanie funkcji czytającej dane
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
# doc <- paste(readLines(url), collapse=" ")
doc <- getURL(url, ssl.verifypeer=0L, followlocation=1L) # moje wlasne usprawnienie :D
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE, encoding="UTF-8")
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
# Wgrywanie  danych z google dysku
gdoc <- "https://docs.google.com/spreadsheets/d/1iSt2ZD9F8DhEh8UonnYqZ71wG7gqm5MSlpiZM2vL-Gw/pubhtml?gid=1189066294&single=true"
elem <- readGoogleSheet(gdoc)
m <- cleanGoogleTable(elem, table=1)
m<-m[,colnames(m)!="X"]
######################################### [ANIMACJAprzygotowanie prob
proba<-list();
for (i in 1:18) {
proba[[i]]<-0
for (j in 1:1000){
proba[[i]][j]<-round(sum(sample(x = m$Glosowanie, size = (i+1), replace =F ) ==1)/(i+1), 4)
}
}
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black")
abline(v=7/20, col="red")
ani.pause(1)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
install.packages('animation', repos = 'http://rforge.net', type = 'source')
install.packages('animation', repos = 'http://rforge.net', type = 'source')
install.packages("animation", repos = "http://rforge.net", type = "source")
ani.options(
convert = shQuote('C:/Program Files/ImageMagick-6.9.0-Q16/convert.exe')
)
library(animation)
ani.options(
convert = shQuote('C:/Program Files/ImageMagick-6.9.0-Q16/convert.exe')
)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black")
abline(v=7/20, col="red")
ani.pause(1)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
ani.options(
convert = shQuote('convert.exe')
)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black")
abline(v=7/20, col="red")
ani.pause(1)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
remove.packages("animation", lib="~/R/win-library/3.1")
install.packages("animation")
library(animation);
library(ggplot2);
options(OutDec= ",");
library(knitr);
library(XML);
library(RCurl)
# Przygotowanie funkcji czytającej dane
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
# Przygotowanie funkcji czytającej dane
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
# doc <- paste(readLines(url), collapse=" ")
doc <- getURL(url, ssl.verifypeer=0L, followlocation=1L) # moje wlasne usprawnienie :D
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE, encoding="UTF-8")
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
# Wgrywanie  danych z google dysku
gdoc <- "https://docs.google.com/spreadsheets/d/1iSt2ZD9F8DhEh8UonnYqZ71wG7gqm5MSlpiZM2vL-Gw/pubhtml?gid=1189066294&single=true"
elem <- readGoogleSheet(gdoc)
m <- cleanGoogleTable(elem, table=1)
m<-m[,colnames(m)!="X"]
######################################### [ANIMACJAprzygotowanie prob
proba<-list();
for (i in 1:18) {
proba[[i]]<-0
for (j in 1:1000){
proba[[i]][j]<-round(sum(sample(x = m$Glosowanie, size = (i+1), replace =F ) ==1)/(i+1), 4)
}
}
library(animation)
ani.options(
convert = shQuote('convert.exe')
)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black")
abline(v=7/20, col="red")
ani.pause(1)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
library(devtools)
install.packages('animation', repos = 'http://rforge.net', type = 'source')
install.packages("animation", repos = "http://rforge.net", type = "source")
library(animation);
library(ggplot2);
options(OutDec= ",");
library(knitr);
library(XML);
library(RCurl)
# Przygotowanie funkcji czytającej dane
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
# Przygotowanie funkcji czytającej dane
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
# doc <- paste(readLines(url), collapse=" ")
doc <- getURL(url, ssl.verifypeer=0L, followlocation=1L) # moje wlasne usprawnienie :D
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE, encoding="UTF-8")
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
# Wgrywanie  danych z google dysku
gdoc <- "https://docs.google.com/spreadsheets/d/1iSt2ZD9F8DhEh8UonnYqZ71wG7gqm5MSlpiZM2vL-Gw/pubhtml?gid=1189066294&single=true"
elem <- readGoogleSheet(gdoc)
m <- cleanGoogleTable(elem, table=1)
m<-m[,colnames(m)!="X"]
######################################### [ANIMACJAprzygotowanie prob
proba<-list();
for (i in 1:18) {
proba[[i]]<-0
for (j in 1:1000){
proba[[i]][j]<-round(sum(sample(x = m$Glosowanie, size = (i+1), replace =F ) ==1)/(i+1), 4)
}
}
library(animation)
ani.options(
convert = shQuote('convert.exe')
)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black")
abline(v=7/20, col="red")
ani.pause(1)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black")
hist(rnorm(100),breaks = 100)
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black", breaks=100  )
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black", breaks=100  )
abline(v=7/20, col="red")
ani.pause(1)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
hist(proba[[i]], xlim= c(0,1), ylim=c(0,500), xlab=paste("Wielkość próby:", c(i+1),sep=" "), col="black", breaks=100  )
abline(v=7/20, col="red")
ani.pause(2)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
ggplot(proba[[i]], aes(x=proba[[i]]))
proba[[i]]
data.frame(proba[[i]] )
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
ggplot(PROBY_SYMULACJA, aes(x=poparcie))
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram()
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram()+
xlim(0:1)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0:1)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0:1)+
ylim(0:500)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(c(0,1))+
ylim(c(0,500))
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
position_stack(width = 600, height = 600)+
xlim(c(0,1))
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
position_stack(width = 600, height = 600)+
xlim(0:1)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
position_stack(width = 600, height = 600)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0:1)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0:1)+
ylim(0:500)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0:1)+
Ylim(0:500)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)+
ylim(0,500)
PROBY_SYMULACJA
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.001)+
xlim(0,1)+
ylim(0,500)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.1)+
xlim(0,1)+
ylim(0,500)
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)+
ylim(0,500)
xlim(0,1)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)
ani.pause(2)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
for (i in 1:ani.options("nmax")) {
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)
ani.pause(2)
}
ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)
priint(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1))
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1))
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1))
ani.pause(2)
}
}, interval = 0.5, movie.name = "demo.gif", ani.width = 600, ani.height = 600)
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)+
geom_vline(xintercept = 7/20, col="red"))
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)+
geom_vline(xintercept = 7/20, col="red"))
ani.pause(2)
}
}, interval = 0.5, movie.name = "symulacja.gif", ani.width = 600, ani.height = 600)
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)+
geom_vline(xintercept = 7/20, col="red"))
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1))
ani.pause(2)
}
}, interval = 0.5, movie.name = "symulacja.gif", ani.width = 600, ani.height = 600)
warnings
warnings(0)
warnings()
library(animation);
library(ggplot2);
options(OutDec= ",");
library(knitr);
library(XML);
library(RCurl)
# Przygotowanie funkcji czytającej dane
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
# Przygotowanie funkcji czytającej dane
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
# doc <- paste(readLines(url), collapse=" ")
doc <- getURL(url, ssl.verifypeer=0L, followlocation=1L) # moje wlasne usprawnienie :D
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE, encoding="UTF-8")
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
# Wgrywanie  danych z google dysku
gdoc <- "https://docs.google.com/spreadsheets/d/1iSt2ZD9F8DhEh8UonnYqZ71wG7gqm5MSlpiZM2vL-Gw/pubhtml?gid=1189066294&single=true"
elem <- readGoogleSheet(gdoc)
m <- cleanGoogleTable(elem, table=1)
m<-m[,colnames(m)!="X"]
######################################### [ANIMACJAprzygotowanie prob
proba<-list();
for (i in 1:18) {
proba[[i]]<-0
for (j in 1:1000){
proba[[i]][j]<-round(sum(sample(x = m$Glosowanie, size = (i+1), replace =F ) ==1)/(i+1), 4)
}
}
library(animation)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1))+
geom_vline(xintercept = 7/20)
ani.pause(2)
}
}, interval = 0.5, movie.name = "symulacja.gif", ani.width = 600, ani.height = 600)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)+
geom_vline(xintercept = 7/20))
ani.pause(2)
}
}, interval = 0.5, movie.name = "symulacja.gif", ani.width = 600, ani.height = 600)
saveGIF({
ani.options(nmax = 18)
for (i in 1:ani.options("nmax")) {
PROBY_SYMULACJA<-data.frame(poparcie=proba[[i]] )
print(ggplot(PROBY_SYMULACJA, aes(x=poparcie))+geom_histogram(binwidth = 0.01)+
xlim(0,1)+
geom_vline(xintercept = 7/20, col="red"))
ani.pause(2)
}
}, interval = 0.5, movie.name = "symulacja.gif", ani.width = 600, ani.height = 600)
