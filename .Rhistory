# http://blog.revolutionanalytics.com/2014/06/reading-data-from-the-new-version-of-google-spreadsheets.html
# setwd( getwd() )
# Wgranie pakietów
options(OutDec= ",");
library(knitr);
library(XML);
library(RCurl)
# Przygotowanie funkcji czytającej dane
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
# Przygotowanie funkcji czytającej dane
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
# doc <- paste(readLines(url), collapse=" ")
doc <- getURL(url, ssl.verifypeer=0L, followlocation=1L) # moje wlasne usprawnienie :D
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=T, stringsAsFactors=FALSE, as.data.frame=TRUE, encoding="UTF-8")
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
# Wgrywanie  danych z google dysku
gdoc <- "https://docs.google.com/spreadsheets/d/1iSt2ZD9F8DhEh8UonnYqZ71wG7gqm5MSlpiZM2vL-Gw/pubhtml?gid=1189066294&single=true"
elem <- readGoogleSheet(gdoc)
m <- cleanGoogleTable(elem, table=1)
m<-m[,colnames(m)!="X"]
Encoding(m[,"Miejsce zamieszkania"])<-"UTF-8"
Encoding(m[,"Preferencje wyborcze"])<-"UTF-8"
kable(m)
# sposob czytania arkuszy Google zaporzyczony ze strony:
# http://blog.revolutionanalytics.com/2014/06/reading-data-from-the-new-version-of-google-spreadsheets.html
# setwd( getwd() )
# Wgranie pakietów
options(OutDec= ",");
library(knitr);
library(XML);
library(RCurl)
# Przygotowanie funkcji czytającej dane
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
# Przygotowanie funkcji czytającej dane
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
# doc <- paste(readLines(url), collapse=" ")
doc <- getURL(url, ssl.verifypeer=0L, followlocation=1L) # moje wlasne usprawnienie :D
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=T, stringsAsFactors=T, as.data.frame=TRUE, encoding="UTF-8")
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
# Wgrywanie  danych z google dysku
gdoc <- "https://docs.google.com/spreadsheets/d/1iSt2ZD9F8DhEh8UonnYqZ71wG7gqm5MSlpiZM2vL-Gw/pubhtml?gid=1189066294&single=true"
elem <- readGoogleSheet(gdoc)
m <- cleanGoogleTable(elem, table=1)
m<-m[,colnames(m)!="X"]
Encoding(m[,"Miejsce zamieszkania"])<-"UTF-8"
Encoding(m[,"Preferencje wyborcze"])<-"UTF-8"
kable(m)
# sposob czytania arkuszy Google zaporzyczony ze strony:
# http://blog.revolutionanalytics.com/2014/06/reading-data-from-the-new-version-of-google-spreadsheets.html
# setwd( getwd() )
# Wgranie pakietów
options(OutDec= ",");
library(knitr);
library(XML);
library(RCurl)
# Przygotowanie funkcji czytającej dane
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
# Przygotowanie funkcji czytającej dane
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
# doc <- paste(readLines(url), collapse=" ")
doc <- getURL(url, ssl.verifypeer=0L, followlocation=1L) # moje wlasne usprawnienie :D
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=T, stringsAsFactors=FALSE, as.data.frame=TRUE, encoding="UTF-8")
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
# Wgrywanie  danych z google dysku
gdoc <- "https://docs.google.com/spreadsheets/d/1iSt2ZD9F8DhEh8UonnYqZ71wG7gqm5MSlpiZM2vL-Gw/pubhtml?gid=1189066294&single=true"
elem <- readGoogleSheet(gdoc)
m <- cleanGoogleTable(elem, table=1)
m<-m[,colnames(m)!="X"]
Encoding(m[,"Miejsce zamieszkania"])<-"UTF-8"
Encoding(m[,"Preferencje wyborcze"])<-"UTF-8"
kable(m)
# sposob czytania arkuszy Google zaporzyczony ze strony:
# http://blog.revolutionanalytics.com/2014/06/reading-data-from-the-new-version-of-google-spreadsheets.html
# setwd( getwd() )
# Wgranie pakietów
options(OutDec= ",");
library(knitr);
library(XML);
library(RCurl)
# Przygotowanie funkcji czytającej dane
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
# Przygotowanie funkcji czytającej dane
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
# doc <- paste(readLines(url), collapse=" ")
doc <- getURL(url, ssl.verifypeer=0L, followlocation=1L) # moje wlasne usprawnienie :D
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=T, stringsAsFactors=FALSE, as.data.frame=TRUE, encoding="UTF-8")
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
# Wgrywanie  danych z google dysku
gdoc <- "https://docs.google.com/spreadsheets/d/1iSt2ZD9F8DhEh8UonnYqZ71wG7gqm5MSlpiZM2vL-Gw/pubhtml?gid=1189066294&single=true"
elem <- readGoogleSheet(gdoc)
m <- cleanGoogleTable(elem, table=1)
m<-m[,colnames(m)!="X"]
# Encoding(m[,"Miejsce zamieszkania"])<-"UTF-8"
# Encoding(m[,"Preferencje wyborcze"])<-"UTF-8"
kable(m)
c(rep("MIASTO",12), rep("WIEŚ",8))
c(rep("MIASTO",12), rep("WIEŚ",8))
1:20
m<-data.frame( 1:20,
c(rep("MIASTO",12), rep("WIEŚ",8)),
c( rep("Głosuję na partię X", 5),
"Głosuję na inną partię niż X",
rep("Nie idę na wybory", 6),
rep("Głosuję na partię X", 2),
rep("Głosuję na inną partię niż X", 2),
rep("Nie idę na wybory", 6)
)
m<-data.frame( 1:20,
c(rep("MIASTO",12), rep("WIEŚ",8)),
c( rep("Głosuję na partię X", 5),
"Głosuję na inną partię niż X",
rep("Nie idę na wybory", 6),
rep("Głosuję na partię X", 2),
rep("Głosuję na inną partię niż X", 2),
rep("Nie idę na wybory", 6)
)
)
c( rep("Głosuję na partię X", 5),
"Głosuję na inną partię niż X",
rep("Nie idę na wybory", 6),
rep("Głosuję na partię X", 2),
rep("Głosuję na inną partię niż X", 2),
rep("Nie idę na wybory", 6)
)
m<-data.frame( 1:20,
c(rep("MIASTO",12), rep("WIEŚ",8)),
c( rep("Głosuję na partię X", 5),
"Głosuję na inną partię niż X",
rep("Nie idę na wybory", 6),
rep("Głosuję na partię X", 2),
rep("Głosuję na inną partię niż X", 2),
rep("Nie idę na wybory", 4)
)
)
colnames(m)
colnames(m)<-c("L.p.", "Miejsce zamieszkania",	"Preferencje wyborcze")
m
kable( m, format = "markdown")
p2<-c();
for (i in 1:10000){
p2[i]<-paste(sum(sample(m$Glosowanie, 2)=="Nie idę na wybory")/2*100, "%", sep="")
}
p2<-data.frame( Lp=c(1:length(p2)), absencja=p2);
p2<-c();
for (i in 1:10000){
p2[i]<-paste(sum(sample(m$Glosowanie, 2)=="Nie idę na wybory")/2*100, "%", sep="")
}
p2<-c();
for (i in 1:10000){
p2[i]<-paste(sum(sample(m$"Miejsce zamieszkania", 2)=="Nie idę na wybory")/2*100, "%", sep="")
}
p2<-data.frame( Lp=c(1:length(p2)), absencja=p2);
p2
table(p2)
p2
p2<-c();
for (i in 1:10000){
p2[i]<-paste(sum(sample(m$"Miejsce zamieszkania", 2)=="Nie idę na wybory")/2*100, "%", sep="")
}
table(p2)
m$"Miejsce zamieszkania"
p2<-c();
for (i in 1:10000){
p2[i]<-paste(sum(sample(m$"Preferencje wyborcze", 2)=="Nie idę na wybory")/2*100, "%", sep="")
}
table(p2)
p2<-c();
for (i in 1:10000){
p2[i]<-paste(sum(sample(m$"Preferencje wyborcze", 2)=="Nie idę na wybory")/2*100, "%", sep="")
}
p2<-table(p2)
b.2<-barplot(p2, las=1)
p2<-c();
for (i in 1:10000){
p2[i]<-paste(sum(sample(m$"Preferencje wyborcze", 2)=="Nie idę na wybory")/2*100, "%", sep="")
}
p2<-table(p2)[c(1,3,2)]
b.2<-barplot(p2, las=1)
b.2<-barplot(p2, las=1, ylim=c(0,6000))
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "grey90")
abline(h=seq(0,6000,1000), col="grey100");
abline(v=b.2, col="grey100");
barplot(p.2, las=1, add=T, col="black", ylim=c(0, 230), ylab = "Liczba prób", xlab="Poziom absencji wyborczej w próbie", cex.names = 1.5 );
barplot(b.2, las=1, add=T, col="black", ylim=c(0, 230), ylab = "Liczba prób", xlab="Poziom absencji wyborczej w próbie", cex.names = 1.5 );
b.2
barplot(p2, las=1, add=T, col="black", ylim=c(0, 230), ylab = "Liczba prób", xlab="Poziom absencji wyborczej w próbie", cex.names = 1.5 );
b.2<-barplot(p2, las=1, ylim=c(0,6000), names.arg = "")
rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col = "grey90")
abline(h=seq(0,6000,1000), col="grey100");
abline(v=b.2, col="grey100");
barplot(p2, las=1, add=T, col="black", ylim=c(0, 230), ylab = "Liczba prób", xlab="Poziom absencji wyborczej w próbie", cex.names = 1.5 );
box( col = "grey90")
p2
text(b.6, p2+500, labels = p2, cex = 1.4);
p2
p2[1]
p2[[1]]
library(knitr)
p2<-c();
for (i in 1:10000){
p2[i]<-paste(sum(sample(m$"Preferencje wyborcze", 2)=="Nie idę na wybory")/2*100, "%", sep="")
}
p2<-table(p2)[c(1,3,2)]
library(XML)
theurl <- "http://wybory2011.pkw.gov.pl/wsw/pl/000000.html"
tables <- readHTMLTable(theurl)
tables
tables[[1]
]
tables[1]
names(tables)
names(tables)
tables$sejm_srt
thepage <- "http://wybory2011.pkw.gov.pl/wsw/pl/000000.html"
tabela <- readHTMLTable(thepage)
Encoding(thepage) <- "UTF-8"; # kodowanie strony
names(tabela)
tabela$sejm_srt
tabela <- readHTMLTable(thepage, encoding="UTF-8" )
tabela$sejm_srt
tabela <- readHTMLTable(thepage, Encoding="UTF-8" )
tabela$sejm_srt
cbos<-data.frame(
Parita=c(
"Komitet Wyborczy Prawo i Sprawiedliwość",
"Komitet Wyborczy Sojusz Lewicy Demokratycznej",
"Komitet Wyborczy Polskie Stronnictwo Ludowe",
"Komitet Wyborczy Platforma Obywatelska RP"),
Poparcie=c(
0.2,
9,
6,
34))
cbos
cbos<-data.frame(
Parita=c(
"Komitet Wyborczy Prawo i Sprawiedliwość",
"Komitet Wyborczy Sojusz Lewicy Demokratycznej",
"Komitet Wyborczy Polskie Stronnictwo Ludowe",
"Komitet Wyborczy Platforma Obywatelska RP"),
Poparcie=c(
0.2,
9,
6,
34))
barplot(cbos$Poparcie)
cbos$Poparcie
cbos<-data.frame(
Parita=c(
"Komitet Wyborczy Prawo i Sprawiedliwość",
"Komitet Wyborczy Sojusz Lewicy Demokratycznej",
"Komitet Wyborczy Polskie Stronnictwo Ludowe",
"Komitet Wyborczy Platforma Obywatelska RP"),
Poparcie=c(
0.2,
0.09,
0.06,
0.34))
barplot(cbos$Poparcie)
barplot(cbos$Poparcie, xlab = cbos$Parita)
barplot(cbos$Poparcie, xlab = cbos$Parita, las=2)
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=2)
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1)
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=2)
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=0)
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=3)
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1)
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1, col = "red")
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1, col = c("blue", "red", "darkgeen", "orange"))
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1, col = c("blue", "red", "geen", "orange"))
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1, col = c("blue", "red", "green", "orange"))
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1, col = c("blue", "red", "darkgreen", "orange"))
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1, col = c("blue", "red", "green2", "orange"))
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1, col = c("blue", "red", "green4", "orange"))
barplot(cbos$Poparcie, xlab = substring(cbos$Parita,18), las=1, col = c("blue", "red", "green3", "orange"))
tabela$sejm_srt
pkw<-tabela$sejm_srt
pkw
class(pkw)
names(pkw)
pkw<-pkw[,names(pkw)[2:3]]
pkw
nameS( pkw$Nazwa komitetu)
nameS( pkw[,"Nazwa komitetu")
nameS( pkw[,"Nazwa komitetu"])
names( pkw[,"Nazwa komitetu"])
pkw[,"Nazwa komitetu"]
thepage <- "http://wybory2011.pkw.gov.pl/wsw/pl/000000.html"
tabela <- readHTMLTable(thepage, Encoding="UTF-8" )
Encoding(thepage) <- "UTF-8"; # kodowanie strony
names(tabela)
pkw<-tabela$sejm_srt
pkw<-pkw[,names(pkw)[2:3]]
pkw<-pkw[pkw[,"Nazwa komitetu"] %in% c( "Komitet Wyborczy Prawo i Sprawiedliwość",
"Komitet Wyborczy Sojusz Lewicy Demokratycznej",
"Komitet Wyborczy Polskie Stronnictwo Ludowe",
"Komitet Wyborczy Platforma Obywatelska RP"), ]
pkw
names(pkw)
names(pkw)<-c("nazwa.komitetu", "poparcie")
gsub(",", ".", pkw$poparcie)
pkw$poparcie<-gsub("%", "", pkw$poparcie);
pkw$poparcie
thepage <- "http://wybory2011.pkw.gov.pl/wsw/pl/000000.html"
tabela <- readHTMLTable(thepage, Encoding="UTF-8" )
Encoding(thepage) <- "UTF-8"; # kodowanie strony
names(tabela)
pkw<-tabela$sejm_srt
pkw<-pkw[,names(pkw)[2:3]]
pkw<-pkw[pkw[,"Nazwa komitetu"] %in% c( "Komitet Wyborczy Prawo i Sprawiedliwość",
"Komitet Wyborczy Sojusz Lewicy Demokratycznej",
"Komitet Wyborczy Polskie Stronnictwo Ludowe",
"Komitet Wyborczy Platforma Obywatelska RP"), ]
names(pkw)<-c("nazwa.komitetu", "poparcie")
pkw$poparcie<-
pkw$poparcie<-gsub(",", ".", pkw$poparcie);
pkw$poparcie<-gsub("%", "", pkw$poparcie);
pkw$poparcie
pkw$poparcie<-pkw$poparcie/100
pkw$poparcie<-as.numeric(pkw$poparcie)/100
barplot(pkw$poparcie, xlab = substring(pkw$nazwa.komitetu,18), las=1, col = c("blue", "red", "green3", "orange"));
razem<-cbind(pkw$poparcie, cbos$Poparcie)
razem
row.names(razem)<-substring(pkw$nazwa.komitetu,18);
razem
barp;ot(razem)
barplot(razem)
barplot(razem, beside = T)
barplot(razem, beside = T, las=1)
barplot(t(razem), beside = T, las=1)
barplot(t(razem), beside = T, las=1, col=c("red", "green"))
barplot(t(razem), beside = T, las=1, col=c("blue", "blue2"))
barplot(t(razem), beside = T, las=1, col=c("blue", "blue4"))
barplot(t(razem), beside = T, las=1, col=c("blue", "blue4", "red", "red4"))
barplot(t(razem), beside = T, las=1, col=c("blue", "blue4", "red", "red4", "green", "green4"))
barplot(t(razem), beside = T, las=1, col=c("blue", "blue4", "red", "red4", "green", "green4", "orange", "orange4"))
